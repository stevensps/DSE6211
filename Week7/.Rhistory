View(data)
ggplot(data, aes(x = x)) +
geom_line(aes(y = f), color = "black") +
geom_point(aes(y = observations), color = "blue", shape = 1) +
geom_line(aes(y = lm), color = "red", linetype = "solid") +
geom_line(aes(y = pm), color = "orange", linetype = "solid") +
geom_point(aes(x = 1, y = data[x == 1, "lm"]), color = "red", shape=2) +
geom_point(aes(x = 1, y = data[x == 1, "pm"]), color = "orange", shape=2)
observations_new <- f + rnorm(length(x), mean = 0, sd = 15)
model1 <- lm(observations_new ~ poly(x, 1))
predictions1 <- predict(model1, newdata = data.frame(x = x))
model25 <- lm(observations_new ~ poly(x, 25))
predictions25 <- predict(model25, newdata = data.frame(x = x))
data <- data.frame(x = x,
f = f,
observations = observations_new,
lm = predictions1,
pm = predictions25)
ggplot(data, aes(x = x)) +
geom_line(aes(y = f), color = "black") +
geom_point(aes(y = observations), color = "blue", shape = 1) +
geom_line(aes(y = lm), color = "red", linetype = "solid") +
geom_line(aes(y = pm), color = "orange", linetype = "solid") +
geom_point(aes(x = 1, y = data[x == 1, "lm"]), color = "red", shape = 2) +
geom_point(aes(x = 1, y = data[x == 1, "pm"]), color = "orange", shape = 2)
results1 <- data.frame(x = 1, f_pred = 0)
for (i in 1:500) {
x <- seq(-3, 2, by = 0.1)
f <- true_relationship(x)
temp_observations <- f + rnorm(length(x), mean=0, sd=15)
model1 <- lm(temp_observations ~ poly(x, 1))
results1[i, 1] <- 1
results1[i, 2] <- predict(model1, newdata = data.frame(x=1))
}
ggplot() +
geom_line(data = data, aes(x = x, y = f), color = "black") +
geom_point(data = results1, aes(x = x, y = f_pred), color="red", shape=2)
results20 <- data.frame(x = 1, f_pred = 0)
for (i in 1:500) {
x <- seq(-3, 2, by = 0.1)
f <- true_relationship(x)
temp_observations <- f + rnorm(length(x), mean=0, sd=15)
model20 <- lm(temp_observations ~ poly(x, 20))
results20[i, 1] <- 1
results20[i, 2] <- predict(model20, newdata = data.frame(x=1))
}
ggplot() +
geom_line(data = data, aes(x = x, y = f), color = "black") +
geom_point(data = results20, aes(x = x, y = f_pred), color="orange", shape=2)
models <- vector("list", 25)
for (degree in 1:25) {
model <- lm(observations ~ poly(x, degree))
models[[degree]] <- model
}
results <- data.frame(degree = 1:25, rmse = 0)
for (degree in 1:25) {
predictions <- predict(models[[degree]], newdata = data.frame(x=x))
results[results$degree==degree, "rmse"] <-
sqrt((1/length(predictions))*sum((predictions-observations)^2))
}
ggplot() +
geom_line(data = results, aes(x = degree, y = rmse), color = "black")
results <- data.frame(degree = 1:25, rmse = 0)
for (degree in 1:25) {
predictions <- predict(models[[degree]], newdata = data.frame(x=x))
results[results$degree==degree, "rmse"] <-
sqrt((1/length(predictions))*sum((predictions-observations_new)^2))
}
ggplot() +
geom_line(data = results, aes(x = degree, y = rmse), color = "black")
model <- lm(observations ~ poly(x, 6))
predictions=predict(model, newdata = data.frame(x=x))
data = data.frame(x=x, f=f, predictions=predictions)
ggplot(data, aes(x=x)) +
geom_line(aes(y = f), color = "black") +
geom_line(aes(y = predictions), color = "red", linetype="solid")
library(dplyr)
library(caret)
library(reticulate)
library(tensorflow)
library(keras)
library(MESS)
data <- read.csv("lab_7_data.csv")
getwd
getwd()
setwd("C:\\Users\\steve\\OneDrive\\Documents\\School\\DSE6211\\Week7")
data <- read.csv("lab_7_data.csv")
training_ind <- createDataPartition(data$lodgepole_pine,
p = 0.75,
list = FALSE,
times = 1)
View(training_ind)
training_set <- data[training_ind, ]
test_set <- data[-training_ind, ]
top_20_soil_types <- training_set %>%
group_by(soil_type) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
select(soil_type) %>%
top_n(20)
training_set$soil_type <- ifelse(training_set$soil_type %in%
top_20_soil_types$soil_type,
training_set$soil_type,
"other")
View(training_set)
training_set$wilderness_area <-factor(training_set$wilderness_area)
training_set$soil_type <- factor(training_set$soil_type)
onehot_encoder <- dummyVars(~ wilderness_area + soil_type,
training_set[, c("wilderness_area",
"soil_type")],
levelsOnly = TRUE,
fullRank = TRUE)
onehot_enc_training <- predict(onehot_encoder,
training_set[, c("wilderness_area",
"soil_type")])
training_set <- cbind(training_set, onehot_enc_training)
View(training_set)
test_set$soil_type <- ifelse(test_set$soil_type %in%
top_20_soil_types$soil_type,
test_set$soil_type,
"other")
test_set$wilderness_area <- factor(test_set$wilderness_area)
test_set$soil_type <- factor(test_set$soil_type)
onehot_enc_test <- predict(onehot_encoder, test_set[,
c("wilderness_area",
"soil_type")])
test_set <- cbind(test_set, onehot_enc_test)
test_set[, -c(11:13)] <- scale(test_set[, -c(11:13)],
center = apply(training_set[,
-c(11:13)],
2, mean),
scale = apply(training_set[,
-c(11:13)],
2, sd))
View(training_set)
training_set[, -c(11:13)] <- scale(training_set[, -c(11:13)])
training_features <- array(data = unlist(training_set[,
-c(11:13)]),
dim = c(nrow(training_set), 33))
training_labels <- array(data = unlist(training_set[, 13]),
dim = c(nrow(training_set)))
test_features <- array(data = unlist(test_set[, -c(11:13)]),
dim = c(nrow(test_set), 33))
test_labels <- array(data = unlist(test_set[, 13]),
dim = c(nrow(test_set)))
View(training_features)
pca_results <- prcomp(training_features[, 1:10])
summary(pca_results)
screeplot(pca_results, type = "line")
training_rotated <- as.matrix(training_features[, 1:10]) %*%
pca_results$rotation
View(training_rotated)
training_features <- cbind(training_features, training_rotated[,
1:6])
View(training_features)
test_rotated <- as.matrix(test_features[, 1:10]) %*%
pca_results$rotation
test_features <- cbind(test_features, test_rotated[, 1:6])
use_virtualenv("my_tf_workspace")
model <- keras_model_sequential(list(
layer_dense(units = 50, activation = "relu"),
layer_dense(units = 25, activation = "relu"),
layer_dense(units = 1, activation = "sigmoid")))
compile(model,
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = "accuracy")
library(keras3)
compile(model,
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = "accuracy")
history <- fit(model, training_features, training_labels,
epochs = 40, batch_size = 512,
validation_split = 0.33)
model <- keras_model_sequential(list(
layer_dense(units = 50, activation = "relu"),
layer_dense(units = 25, activation = "relu"),
layer_dense(units = 1, activation = "sigmoid")))
model <- keras_model_sequential(list(
layer_dense(units = 50, activation = "relu") %>%
layer_dense(units = 25, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")))
model <- keras_model_sequential(
layer_dense(units = 50, activation = "relu") %>%
layer_dense(units = 25, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid"))
model <- keras_model_sequential() %>%
layer_dense(units = 50, activation = "relu") %>%
layer_dense(units = 25, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
compile(model,
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = "accuracy")
history <- fit(model, training_features, training_labels,
epochs = 40, batch_size = 512,
validation_split = 0.33)
history <- fit(model, training_features, training_labels,
epochs = 40, batch_size = 512,
validation_split = 0.33)
library(dplyr)
library(caret)
library(reticulate)
library(tensorflow)
library(keras3)
library(MESS)
setwd("C:\\Users\\steve\\OneDrive\\Documents\\School\\DSE6211\\Week7")
data <- read.csv("lab_7_data.csv")
training_ind <- createDataPartition(data$lodgepole_pine,
p = 0.75,
list = FALSE,
times = 1)
training_set <- data[training_ind, ]
test_set <- data[-training_ind, ]
top_20_soil_types <- training_set %>%
group_by(soil_type) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
select(soil_type) %>%
top_n(20)
training_set$soil_type <- ifelse(training_set$soil_type %in%
top_20_soil_types$soil_type,
training_set$soil_type,
"other")
training_set$wilderness_area <-factor(training_set$wilderness_area)
training_set$soil_type <- factor(training_set$soil_type)
onehot_encoder <- dummyVars(~ wilderness_area + soil_type,
training_set[, c("wilderness_area",
"soil_type")],
levelsOnly = TRUE,
fullRank = TRUE)
onehot_enc_training <- predict(onehot_encoder,
training_set[, c("wilderness_area",
"soil_type")])
training_set <- cbind(training_set, onehot_enc_training)
test_set$soil_type <- ifelse(test_set$soil_type %in%
top_20_soil_types$soil_type,
test_set$soil_type,
"other")
test_set$wilderness_area <- factor(test_set$wilderness_area)
test_set$soil_type <- factor(test_set$soil_type)
onehot_enc_test <- predict(onehot_encoder, test_set[,
c("wilderness_area",
"soil_type")])
test_set <- cbind(test_set, onehot_enc_test)
test_set[, -c(11:13)] <- scale(test_set[, -c(11:13)],
center = apply(training_set[,
-c(11:13)],
2, mean),
scale = apply(training_set[,
-c(11:13)],
2, sd))
training_set[, -c(11:13)] <- scale(training_set[, -c(11:13)])
training_features <- array(data = unlist(training_set[,
-c(11:13)]),
dim = c(nrow(training_set), 33))
training_labels <- array(data = unlist(training_set[, 13]),
dim = c(nrow(training_set)))
test_features <- array(data = unlist(test_set[, -c(11:13)]),
dim = c(nrow(test_set), 33))
test_labels <- array(data = unlist(test_set[, 13]),
dim = c(nrow(test_set)))
pca_results <- prcomp(training_features[, 1:10])
summary(pca_results)
screeplot(pca_results, type = "line")
training_rotated <- as.matrix(training_features[, 1:10]) %*%
pca_results$rotation
training_features <- cbind(training_features, training_rotated[,
1:6])
test_rotated <- as.matrix(test_features[, 1:10]) %*%
pca_results$rotation
test_features <- cbind(test_features, test_rotated[, 1:6])
use_virtualenv("my_tf_workspace")
model <- keras_model_sequential() %>%
layer_dense(units = 50, activation = "relu") %>%
layer_dense(units = 25, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
compile(model,
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = "accuracy")
history <- fit(model, training_features, training_labels,
epochs = 40, batch_size = 512,
validation_split = 0.33)
library(dplyr)
library(caret)
library(reticulate)
library(tensorflow)
library(keras3)
library(MESS)
setwd("C:\\Users\\steve\\OneDrive\\Documents\\School\\DSE6211\\Week7")
data <- read.csv("lab_7_data.csv")
training_ind <- createDataPartition(data$lodgepole_pine,
p = 0.75,
list = FALSE,
times = 1)
training_set <- data[training_ind, ]
test_set <- data[-training_ind, ]
top_20_soil_types <- training_set %>%
group_by(soil_type) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
select(soil_type) %>%
top_n(20)
training_set$soil_type <- ifelse(training_set$soil_type %in%
top_20_soil_types$soil_type,
training_set$soil_type,
"other")
training_set$wilderness_area <-factor(training_set$wilderness_area)
training_set$soil_type <- factor(training_set$soil_type)
onehot_encoder <- dummyVars(~ wilderness_area + soil_type,
training_set[, c("wilderness_area",
"soil_type")],
levelsOnly = TRUE,
fullRank = TRUE)
onehot_enc_training <- predict(onehot_encoder,
training_set[, c("wilderness_area",
"soil_type")])
training_set <- cbind(training_set, onehot_enc_training)
test_set$soil_type <- ifelse(test_set$soil_type %in%
top_20_soil_types$soil_type,
test_set$soil_type,
"other")
test_set$wilderness_area <- factor(test_set$wilderness_area)
test_set$soil_type <- factor(test_set$soil_type)
onehot_enc_test <- predict(onehot_encoder, test_set[,
c("wilderness_area",
"soil_type")])
test_set <- cbind(test_set, onehot_enc_test)
test_set[, -c(11:13)] <- scale(test_set[, -c(11:13)],
center = apply(training_set[,
-c(11:13)],
2, mean),
scale = apply(training_set[,
-c(11:13)],
2, sd))
training_set[, -c(11:13)] <- scale(training_set[, -c(11:13)])
training_features <- array(data = unlist(training_set[,
-c(11:13)]),
dim = c(nrow(training_set), 33))
training_labels <- array(data = unlist(training_set[, 13]),
dim = c(nrow(training_set)))
test_features <- array(data = unlist(test_set[, -c(11:13)]),
dim = c(nrow(test_set), 33))
test_labels <- array(data = unlist(test_set[, 13]),
dim = c(nrow(test_set)))
pca_results <- prcomp(training_features[, 1:10])
summary(pca_results)
screeplot(pca_results, type = "line")
training_rotated <- as.matrix(training_features[, 1:10]) %*%
pca_results$rotation
training_features <- cbind(training_features, training_rotated[,
1:6])
test_rotated <- as.matrix(test_features[, 1:10]) %*%
pca_results$rotation
test_features <- cbind(test_features, test_rotated[, 1:6])
use_virtualenv("my_tf_workspace")
model <- keras_model_sequential() %>%
layer_dense(units = 50, activation = "relu") %>%
layer_dense(units = 25, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
compile(model,
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = "accuracy")
history <- fit(model, training_features, training_labels,
epochs = 40, batch_size = 512,
validation_split = 0.33)
predictions <- predict(model, test_features)
test_set$p_prob <- predictions[, 1]
##### ROC curve
roc_data <- data.frame(threshold=seq(1,0,-0.01), fpr=0, tpr=0)
View(roc_data)
for (i in roc_data$threshold) {
over_threshold <- test_set[test_set$p_prob >= i, ]
fpr <- sum(over_threshold$lodgepole_pine==0)/
sum(test_set$lodgepole_pine==0)
roc_data[roc_data$threshold==i, "fpr"] <- fpr
tpr <- sum(over_threshold$lodgepole_pine==1)/
sum(test_set$lodgepole_pine==1)
roc_data[roc_data$threshold==i, "tpr"] <- tpr
}
ggplot() +
geom_line(data = roc_data, aes(x = fpr, y = tpr, color =
threshold), size = 2) +
scale_color_gradientn(colors = rainbow(3)) +
geom_abline(intercept = 0, slope = 1, lty = 2) +
geom_point(data = roc_data[seq(1, 101, 10), ], aes(x = fpr, y =
tpr)) +
geom_text(data = roc_data[seq(1, 101, 10), ],
aes(x = fpr, y = tpr, label = threshold, hjust = 1.2,
vjust = -0.2))
##### AUC
auc <- auc(x = roc_data$fpr, y = roc_data$tpr, type = "spline")
auc
pca_results$rotation
View(pca_results)
# Chunk 1
library(dplyr)
library(caret)
library(reticulate)
library(tensorflow)
library(keras3)
library(MESS)
setwd("C:\\Users\\steve\\OneDrive\\Documents\\School\\DSE6211\\Week7")
data <- read.csv("lab_7_data.csv")
training_ind <- createDataPartition(data$lodgepole_pine,
p = 0.75,
list = FALSE,
times = 1)
training_set <- data[training_ind, ]
test_set <- data[-training_ind, ]
top_20_soil_types <- training_set %>%
group_by(soil_type) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
select(soil_type) %>%
top_n(20)
training_set$soil_type <- ifelse(training_set$soil_type %in%
top_20_soil_types$soil_type,
training_set$soil_type,
"other")
training_set$wilderness_area <-factor(training_set$wilderness_area)
training_set$soil_type <- factor(training_set$soil_type)
onehot_encoder <- dummyVars(~ wilderness_area + soil_type,
training_set[, c("wilderness_area",
"soil_type")],
levelsOnly = TRUE,
fullRank = TRUE)
onehot_enc_training <- predict(onehot_encoder,
training_set[, c("wilderness_area",
"soil_type")])
training_set <- cbind(training_set, onehot_enc_training)
test_set$soil_type <- ifelse(test_set$soil_type %in%
top_20_soil_types$soil_type,
test_set$soil_type,
"other")
test_set$wilderness_area <- factor(test_set$wilderness_area)
test_set$soil_type <- factor(test_set$soil_type)
onehot_enc_test <- predict(onehot_encoder, test_set[,
c("wilderness_area",
"soil_type")])
test_set <- cbind(test_set, onehot_enc_test)
test_set[, -c(11:13)] <- scale(test_set[, -c(11:13)],
center = apply(training_set[,
-c(11:13)],
2, mean),
scale = apply(training_set[,
-c(11:13)],
2, sd))
training_set[, -c(11:13)] <- scale(training_set[, -c(11:13)])
training_features <- array(data = unlist(training_set[,
-c(11:13)]),
dim = c(nrow(training_set), 33))
training_labels <- array(data = unlist(training_set[, 13]),
dim = c(nrow(training_set)))
test_features <- array(data = unlist(test_set[, -c(11:13)]),
dim = c(nrow(test_set), 33))
test_labels <- array(data = unlist(test_set[, 13]),
dim = c(nrow(test_set)))
pca_results <- prcomp(training_features[, 1:10])
summary(pca_results)
screeplot(pca_results, type = "line")
training_rotated <- as.matrix(training_features[, 1:10]) %*%
pca_results$rotation
training_features <- cbind(training_features, training_rotated[,
1:6])
test_rotated <- as.matrix(test_features[, 1:10]) %*%
pca_results$rotation
test_features <- cbind(test_features, test_rotated[, 1:6])
use_virtualenv("my_tf_workspace")
model <- keras_model_sequential() %>%
layer_dense(units = 50, activation = "relu") %>%
layer_dense(units = 25, activation = "relu") %>%
layer_dense(units = 1, activation = "sigmoid")
compile(model,
optimizer = "rmsprop",
loss = "binary_crossentropy",
metrics = "accuracy")
history <- fit(model, training_features, training_labels,
epochs = 40, batch_size = 512,
validation_split = 0.33)
predictions <- predict(model, test_features)
test_set$p_prob <- predictions[, 1]
##### ROC curve
roc_data <- data.frame(threshold=seq(1,0,-0.01), fpr=0, tpr=0)
for (i in roc_data$threshold) {
over_threshold <- test_set[test_set$p_prob >= i, ]
fpr <- sum(over_threshold$lodgepole_pine==0)/
sum(test_set$lodgepole_pine==0)
roc_data[roc_data$threshold==i, "fpr"] <- fpr
tpr <- sum(over_threshold$lodgepole_pine==1)/
sum(test_set$lodgepole_pine==1)
roc_data[roc_data$threshold==i, "tpr"] <- tpr
}
ggplot() +
geom_line(data = roc_data, aes(x = fpr, y = tpr, color =
threshold), size = 2) +
scale_color_gradientn(colors = rainbow(3)) +
geom_abline(intercept = 0, slope = 1, lty = 2) +
geom_point(data = roc_data[seq(1, 101, 10), ], aes(x = fpr, y =
tpr)) +
geom_text(data = roc_data[seq(1, 101, 10), ],
aes(x = fpr, y = tpr, label = threshold, hjust = 1.2,
vjust = -0.2))
##### AUC
auc <- auc(x = roc_data$fpr, y = roc_data$tpr, type = "spline")
auc
# Chunk 2
pca_results$rotation
View(data)
