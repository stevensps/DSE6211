nn_model
nn_model %>% compile(optimizer = optimizer_adam(learning_rate = 0.01),
loss = "mean_squared_error",
metrics = "mean_absolute_error")
nn_model_training <- nn_model %>% fit(x = mtcars_x,
y = mtcars_y,
epochs = 250,
verbose = FALSE)
plot(nn_model_training)
get_weights(nn_model)
prediction <- predict(nn_model, array(c(6, 350, 125), dim = c(1, 3)))
prediction
prediction2 <- predict(nn_model, array(c(8, 250, 200), dim = c(1, 3)))
prediction2
library(reticulate)
library(tensorflow)
library(keras3)
use_virtualenv("my_tf_workspace", required = TRUE)
mtcars <- mtcars
mtcars_x <- mtcars[, c("cyl", "disp", "hp")]
mtcars_x <- array(data = unlist(mtcars_x), dim = c(32, 3),
dimnames = list(rownames(mtcars_x),
colnames(mtcars_x)))
mtcars_y <- mtcars[, "mpg"]
nn_model <- keras_model_sequential() %>%
layer_dense(units = 1, input_shape = 3, activation = "linear")
nn_model
nn_model <- keras_model_sequential() %>%
layer_dense(units = 2, input_shape = 3, activation = "relu") %>%
layer_dense(units = 1, activation = "linear")
nn_model
nn_model %>% compile(optimizer = optimizer_adam(learning_rate = 0.2),
loss = "mean_squared_error",
metrics = "mean_absolute_error")
nn_model_training <- nn_model %>% fit(x = mtcars_x,
y = mtcars_y,
epochs = 250,
verbose = FALSE)
plot(nn_model_training)
get_weights(nn_model)
use_virtualenv("my_tf_workspace", required = TRUE)
prediction <- predict(nn_model, array(c(6, 350, 125), dim = c(1, 3)))
prediction
use_virtualenv("my_tf_workspace", required = TRUE)
prediction2 <- predict(nn_model, array(c(8, 250, 200), dim = c(1, 3)))
prediction2
library(reticulate)
library(tensorflow)
library(keras3)
use_virtualenv("my_tf_workspace", required = TRUE)
mtcars <- mtcars
mtcars_x <- mtcars[, c("cyl", "disp", "hp")]
mtcars_x <- array(data = unlist(mtcars_x), dim = c(32, 3),
dimnames = list(rownames(mtcars_x),
colnames(mtcars_x)))
mtcars_y <- mtcars[, "mpg"]
use_virtualenv("my_tf_workspace", required = TRUE)
nn_model <- keras_model_sequential() %>%
layer_dense(units = 1, input_shape = 3, activation = "linear")
nn_model
use_virtualenv("my_tf_workspace", required = TRUE)
nn_model <- keras_model_sequential() %>%
layer_dense(units = 2, input_shape = 3, activation = "relu") %>%
layer_dense(units = 1, activation = "linear")
nn_model
use_virtualenv("my_tf_workspace", required = TRUE)
nn_model %>% compile(optimizer = optimizer_adam(learning_rate = 0.2),
loss = "mean_squared_error",
metrics = "mean_absolute_error")
nn_model_training <- nn_model %>% fit(x = mtcars_x,
y = mtcars_y,
epochs = 250,
verbose = FALSE)
plot(nn_model_training)
get_weights(nn_model)
use_virtualenv("my_tf_workspace", required = TRUE)
prediction <- predict(nn_model, array(c(6, 350, 125), dim = c(1, 3)))
use_virtualenv("my_tf_workspace", required = TRUE)
prediction2 <- predict(nn_model, array(c(8, 250, 200), dim = c(1, 3)))
prediction
prediction2
library(reticulate)
library(tensorflow)
library(keras3)
use_virtualenv("my_tf_workspace", required = TRUE)
mtcars <- mtcars
mtcars_x <- mtcars[, c("cyl", "disp", "hp")]
mtcars_x <- array(data = unlist(mtcars_x), dim = c(nrow(mtcars), 3),
dimnames = list(rownames(mtcars),
colnames(mtcars_x)))
mtcars_y <- mtcars[, "mpg"]
nn_model <- keras_model_sequential() %>%
layer_dense(units = 1, input_shape = 3, activation = "linear")
nn_model
nn_model <- keras_model_sequential() %>%
layer_dense(units = 2, input_shape = 3, activation = "relu") %>%
layer_dense(units = 1, activation = "linear")
nn_model
nn_model %>% compile(optimizer = optimizer_adam(learning_rate = 0.2),
loss = "mean_squared_error",
metrics = "mean_absolute_error")
nn_model_training <- nn_model %>% fit(x = mtcars_x,
y = mtcars_y,
epochs = 250,
verbose = FALSE)
plot(nn_model_training)
get_weights(nn_model)
prediction1 <- predict(nn_model, array(c(6, 350, 125), dim = c(1, 3)))
prediction2 <- predict(nn_model, array(c(8, 250, 200), dim = c(1, 3)))
print(prediction1)
print(prediction2)
mtcars <- mtcars
mtcars_x <- mtcars[, c("cyl", "disp", "hp")]
mtcars_x <- array(data = unlist(mtcars_x),
dim = c(32, 3),
dimnames = list(rownames(mtcars_x),
colnames(mtcars_x)))
mtcars_y <- mtcars[, "mpg"]
nn_model <- keras_model_sequential() %>%
layer_dense(units = 1, input_shape = 3, activation = "linear")
nn_model %>% compile(optimizer = optimizer_adam(learning_rate = 0.2),
loss = "mean_squared_error")
nn_model_training <- nn_model %>% fit(x = mtcars_x,
y = mtcars_y,
epochs = 10000,
verbose = FALSE)
get_weights(nn_model)
lr_model <- lm(mpg ~ cyl + disp + hp, data = mtcars)
lr_model$coefficients
nn_model
use_virtualenv("my_tf_workspace", required = TRUE)
mtcars <- mtcars
mtcars_x <- mtcars[, c("cyl", "disp", "hp")]
mtcars_x <- array(data = unlist(mtcars_x), dim = c(nrow(mtcars), 3),
dimnames = list(rownames(mtcars),
colnames(mtcars_x)))
mtcars_y <- mtcars[, "mpg"]
nn_model <- keras_model_sequential() %>%
layer_dense(units = 1, input_shape = 3, activation = "linear")
nn_model
clear_session(free_memory = TRUE)
clear_session(free_memory = TRUE)
library(reticulate)
library(tensorflow)
library(keras3)
clear_session(free_memory = TRUE)
use_virtualenv("my_tf_workspace", required = TRUE)
mtcars <- mtcars
mtcars_x <- mtcars[, c("cyl", "disp", "hp")]
mtcars_x <- array(data = unlist(mtcars_x), dim = c(nrow(mtcars), 3),
dimnames = list(rownames(mtcars),
colnames(mtcars_x)))
mtcars_y <- mtcars[, "mpg"]
nn_model <- keras_model_sequential() %>%
layer_dense(units = 1, input_shape = 3, activation = "linear")
nn_model
nn_model <- keras_model_sequential() %>%
layer_dense(units = 2, input_shape = 3, activation = "relu") %>%
layer_dense(units = 1, activation = "linear")
nn_model
nn_model %>% compile(optimizer = optimizer_adam(learning_rate = 0.2),
loss = "mean_squared_error",
metrics = "mean_absolute_error")
nn_model_training <- nn_model %>% fit(x = mtcars_x,
y = mtcars_y,
epochs = 250,
verbose = FALSE)
plot(nn_model_training)
get_weights(nn_model)
prediction1 <- predict(nn_model, array(c(6, 350, 125), dim = c(1, 3)))
print(prediction1)
prediction2 <- predict(nn_model, array(c(8, 250, 200), dim = c(1, 3)))
print(prediction2)
clear_session(free_memory = TRUE
clear_session(free_memory = TRUE)
prediction2 <- predict(nn_model, array(c(8, 250, 200), dim = c(1, 3)))
print(prediction2)
clear_session(free_memory = TRUE)
prediction2 <- predict(nn_model, array(c(8, 250, 200), dim = c(1, 3)))
print(prediction2)
library(reticulate)
library(tensorflow)
library(keras)
install.packages("keras")
library(reticulate)
library(tensorflow)
library(keras)
clear_session(free_memory = TRUE)
use_virtualenv("my_tf_workspace", required = TRUE)
mtcars <- mtcars
mtcars_x <- mtcars[, c("cyl", "disp", "hp")]
mtcars_x <- array(data = unlist(mtcars_x), dim = c(nrow(mtcars), 3),
dimnames = list(rownames(mtcars),
colnames(mtcars_x)))
mtcars_y <- mtcars[, "mpg"]
nn_model <- keras_model_sequential() %>%
layer_dense(units = 1, input_shape = 3, activation = "linear")
nn_model
nn_model <- keras_model_sequential() %>%
layer_dense(units = 2, input_shape = 3, activation = "relu") %>%
layer_dense(units = 1, activation = "linear")
nn_model
nn_model %>% compile(optimizer = optimizer_adam(learning_rate = 0.2),
loss = "mean_squared_error",
metrics = "mean_absolute_error")
nn_model_training <- nn_model %>% fit(x = mtcars_x,
y = mtcars_y,
epochs = 250,
verbose = FALSE)
plot(nn_model_training)
get_weights(nn_model)
prediction1 <- predict(nn_model, array(c(6, 350, 125), dim = c(1, 3)))
prediction2 <- predict(nn_model, array(c(8, 250, 200), dim = c(1, 3)))
print(prediction1)
print(prediction2)
clear_session(free_memory = TRUE)
prediction2 <- predict(nn_model, array(c(8, 250, 200), dim = c(1, 3)))
print(prediction2)
library(reticulate)
library(tensorflow)
library(keras)
clear_session(free_memory = TRUE)
use_virtualenv("my_tf_workspace", required = TRUE)
mtcars <- mtcars
mtcars_x <- mtcars[, c("cyl", "disp", "hp")]
mtcars_x <- array(data = unlist(mtcars_x), dim = c(nrow(mtcars), 3),
dimnames = list(rownames(mtcars),
colnames(mtcars_x)))
mtcars_y <- mtcars[, "mpg"]
nn_model <- keras_model_sequential() %>%
layer_dense(units = 1, input_shape = 3, activation = "linear")
nn_model
nn_model <- keras_model_sequential() %>%
layer_dense(units = 4, input_shape = 3, activation = "relu") %>%
layer_dense(units = 1, activation = "linear")
nn_model
nn_model %>% compile(optimizer = optimizer_adam(learning_rate = 0.2),
loss = "mean_squared_error",
metrics = "mean_absolute_error")
nn_model_training <- nn_model %>% fit(x = mtcars_x,
y = mtcars_y,
epochs = 250,
verbose = FALSE)
plot(nn_model_training)
get_weights(nn_model)
prediction1 <- predict(nn_model, array(c(6, 350, 125), dim = c(1, 3)))
prediction2 <- predict(nn_model, array(c(8, 250, 200), dim = c(1, 3)))
print(prediction1)
print(prediction2)
clear_session(free_memory = TRUE)
use_virtualenv("my_tf_workspace", required = TRUE)
mtcars <- mtcars
mtcars_x <- mtcars[, c("cyl", "disp", "hp")]
mtcars_x <- array(data = unlist(mtcars_x), dim = c(nrow(mtcars), 3),
dimnames = list(rownames(mtcars),
colnames(mtcars_x)))
mtcars_y <- mtcars[, "mpg"]
nn_model <- keras_model_sequential() %>%
layer_dense(units = 1, input_shape = 3, activation = "linear")
nn_model
nn_model <- keras_model_sequential() %>%
layer_dense(units = 4, input_shape = 3, activation = "relu") %>%
layer_dense(units = 1, activation = "linear")
nn_model
nn_model %>% compile(optimizer = optimizer_adam(learning_rate = 0.01),
loss = "mean_squared_error",
metrics = "mean_absolute_error")
nn_model_training <- nn_model %>% fit(x = mtcars_x,
y = mtcars_y,
epochs = 10000,
verbose = FALSE)
plot(nn_model_training)
get_weights(nn_model)
prediction1 <- predict(nn_model, array(c(6, 350, 125), dim = c(1, 3)))
prediction2 <- predict(nn_model, array(c(8, 250, 200), dim = c(1, 3)))
print(prediction1)
print(prediction2)
library(reticulate)
library(tensorflow)
library(keras)
clear_session(free_memory = TRUE)
# Chunk 1
library(reticulate)
library(tensorflow)
library(keras)
use_virtualenv("my_tf_workspace", required = TRUE)
mtcars <- mtcars
mtcars_x <- mtcars[, c("cyl", "disp", "hp")]
mtcars_x <- array(data = unlist(mtcars_x), dim = c(nrow(mtcars), 3),
dimnames = list(rownames(mtcars),
colnames(mtcars_x)))
mtcars_y <- mtcars[, "mpg"]
set.seed(42)
nn_model <- keras_model_sequential() %>%
layer_dense(units = 1, input_shape = 3, activation = "linear")
nn_model
#clear_session(free_memory = TRUE)
nn_model <- keras_model_sequential() %>%
layer_dense(units = 4, input_shape = 3, activation = "relu") %>%
layer_dense(units = 1, activation = "linear")
nn_model
nn_model %>% compile(optimizer = optimizer_adam(learning_rate = 0.01),
loss = "mean_squared_error",
metrics = "mean_absolute_error")
nn_model_training <- nn_model %>% fit(x = mtcars_x,
y = mtcars_y,
epochs = 10000,
verbose = FALSE)
plot(nn_model_training)
get_weights(nn_model)
prediction1 <- predict(nn_model, array(c(6, 350, 125), dim = c(1, 3)))
clear_session(free_memory = TRUE)
prediction2 <- predict(nn_model, array(c(8, 250, 200), dim = c(1, 3)))
print(prediction1)
print(prediction2)
# Chunk 1
library(reticulate)
library(tensorflow)
library(keras)
use_virtualenv("my_tf_workspace", required = TRUE)
mtcars <- mtcars
mtcars_x <- mtcars[, c("cyl", "disp", "hp")]
mtcars_x <- array(data = unlist(mtcars_x), dim = c(nrow(mtcars), 3),
dimnames = list(rownames(mtcars),
colnames(mtcars_x)))
mtcars_y <- mtcars[, "mpg"]
set.seed(42)
nn_model <- keras_model_sequential() %>%
layer_dense(units = 1, input_shape = 3, activation = "linear")
nn_model
#clear_session(free_memory = TRUE)
nn_model <- keras_model_sequential() %>%
layer_dense(units = 4, input_shape = 3, activation = "relu") %>%
layer_dense(units = 1, activation = "linear")
nn_model
nn_model %>% compile(optimizer = optimizer_adam(learning_rate = 0.01),
loss = "mean_squared_error",
metrics = "mean_absolute_error")
nn_model_training <- nn_model %>% fit(x = mtcars_x,
y = mtcars_y,
epochs = 10000,
verbose = FALSE)
plot(nn_model_training)
get_weights(nn_model)
prediction1 <- predict(nn_model, array(c(6, 350, 125), dim = c(1, 3)))
prediction2 <- predict(nn_model, array(c(8, 250, 200), dim = c(1, 3)))
print(prediction1)
print(prediction2)
# Chunk 1
library(reticulate)
library(tensorflow)
library(keras3)
use_virtualenv("my_tf_workspace", required = TRUE)
mtcars <- mtcars
mtcars_x <- mtcars[, c("cyl", "disp", "hp")]
mtcars_x <- array(data = unlist(mtcars_x), dim = c(nrow(mtcars), 3),
dimnames = list(rownames(mtcars),
colnames(mtcars_x)))
mtcars_y <- mtcars[, "mpg"]
set.seed(42)
nn_model <- keras_model_sequential() %>%
layer_dense(units = 1, input_shape = 3, activation = "linear")
nn_model
#clear_session(free_memory = TRUE)
nn_model <- keras_model_sequential() %>%
layer_dense(units = 4, input_shape = 3, activation = "relu") %>%
layer_dense(units = 1, activation = "linear")
nn_model
nn_model %>% compile(optimizer = optimizer_adam(learning_rate = 0.01),
loss = "mean_squared_error",
metrics = "mean_absolute_error")
nn_model_training <- nn_model %>% fit(x = mtcars_x,
y = mtcars_y,
epochs = 10000,
verbose = FALSE)
plot(nn_model_training)
get_weights(nn_model)
prediction1 <- predict(nn_model, array(c(6, 350, 125), dim = c(1, 3)))
prediction2 <- predict(nn_model, array(c(8, 250, 200), dim = c(1, 3)))
print(prediction1)
print(prediction2)
library(dplyr)
library(caret)
data <- read.csv("lab_3_data.csv")
getwd()
setwd("C:/Users/steve/OneDrive/Documents/School/DSE6220/Week3)
setwd("C:/Users/steve/OneDrive/Documents/School/DSE6220/Week3)
setwd("C:\\Users\\steve\\OneDrive\\Documents\\School\\DSE6211\\Week3)
setwd("C:\\Users\\steve\\OneDrive\\Documents\\School\\DSE6211\\Week3)
setwd('C:\\Users\\steve\\OneDrive\\Documents\\School\\DSE6211\\Week3')
getwd()
data <- read.csv("lab_3_data.csv")
training_ind <- createDataPartition(data$lodgepole_pine,
p = 0.75,
list = FALSE,
times = 1)
View(training_ind)
training_set <- data[training_ind, ]
test_set <- data[-training_ind, ]
unique(training_set$wilderness_area)
unique(training_set$soil_type)
top_20_soil_types <- training_set %>%
group_by(soil_type) %>%
summarise(count = n()) %>%
arrange(desc(count)) %>%
select(soil_type) %>%
top_n(20)
View(top_20_soil_types)
training_set$soil_type <- ifelse(training_set$soil_type %in% top_20_soil_types$soil_type,
training_set$soil_type,
"other")
View(training_set)
training_set$wilderness_area <- factor(training_set$wilderness_area)
training_set$soil_type <- factor(training_set$soil_type)
class(training_set$wilderness_area)
class(training_set$soil_type)
levels(training_set$wilderness_area)
levels(training_set$soil_type)
onehot_encoder <- dummyVars(~ wilderness_area + soil_type,
training_set[, c("wilderness_area", "soil_type")],
levelsOnly = TRUE,
fullRank = TRUE)
View(onehot_encoder)
onehot_enc_training <- predict(onehot_encoder,
training_set[, c("wilderness_area", "soil_type")])
View(onehot_enc_training)
training_set <- cbind(training_set, onehot_enc_training)
View(training_set)
test_set$soil_type <- ifelse(test_set$soil_type %in% top_20_soil_types$soil_type,
test_set$soil_type,
"other")
View(test_set)
test_set$wilderness_area <- factor(test_set$wilderness_area)
test_set$soil_type <- factor(test_set$soil_type)
onehot_enc_test <- predict(onehot_encoder, test_set[, c("wilderness_area", "soil_type")])
View(onehot_enc_test)
test_set <- cbind(test_set, onehot_enc_test)
test_set[, -c(11:13)] <- scale(test_set[, -c(11:13)],
center = apply(training_set[, -c(11:13)], 2, mean),
scale = apply(training_set[, -c(11:13)], 2, sd))
View(test_set)
View(training_set)
training_set[, -c(11:13)] <- scale(training_set[, -c(11:13)])
View(training_set)
training_features <- array(data = unlist(training_set[, -c(11:13)]),
dim = c(nrow(training_set), 33))
View(training_features)
training_labels <- array(data = unlist(training_set[, 13]),
dim = c(nrow(training_set)))
test_features <- array(data = unlist(test_set[, -c(11:13)]),
dim = c(nrow(test_set), 33))
test_labels <- array(data = unlist(test_set[, 13]),
dim = c(nrow(test_set)))
head(training_features)
dim(training_features)
library(reticulate)
library(keras3)
py_config()
use_virtualenv("my_tf_workspace", required = TRUE)
library(reticulate)
library(keras3)
use_virtualenv("my_tf_workspace", required = TRUE)
py_config()
py_list_packages()
tf$version$VERSION
library(tensorflow)
tf$version$VERSION
deactivate
deactivate
virtualenv_remove("my_tf_workspace")
Y
virtualenv_create("my_tf_workspace",
python = 'C:\\Users\\steve\\AppData\\Local\\Programs\\Python\\Python311\\python.exe')
install_tensorflow(envname = "my_tf_workspace", version = "2.17.0-cpu")
library(tensorflow)
install_tensorflow(envname = "my_tf_workspace", version = "2.17.0-cpu")
library(reticulate)
library(tensorflow)
library(keras3)
use_virtualenv("my_tf_workspace", required = TRUE)
library(reticulate)
library(tensorflow)
library(keras3)
use_virtualenv("my_tf_workspace", required = TRUE)
py_config()
mtcars <- mtcars
mtcars_x <- mtcars[, c("cyl", "disp", "hp")]
mtcars_x <- array(data = unlist(mtcars_x), dim = c(nrow(mtcars), 3),
dimnames = list(rownames(mtcars),
colnames(mtcars_x)))
mtcars_y <- mtcars[, "mpg"]
set.seed(42)
nn_model <- keras_model_sequential() %>%
layer_dense(units = 1, input_shape = 3, activation = "linear")
nn_model
nn_model <- keras_model_sequential() %>%
layer_dense(units = 4, input_shape = 3, activation = "relu") %>%
layer_dense(units = 1, activation = "linear")
nn_model
nn_model %>% compile(optimizer = optimizer_adam(learning_rate = 0.01),
loss = "mean_squared_error",
metrics = "mean_absolute_error")
nn_model_training <- nn_model %>% fit(x = mtcars_x,
y = mtcars_y,
epochs = 10000,
verbose = FALSE)
plot(nn_model_training)
get_weights(nn_model)
prediction1 <- predict(nn_model, array(c(6, 350, 125), dim = c(1, 3)))
prediction2 <- predict(nn_model, array(c(8, 250, 200), dim = c(1, 3)))
print(prediction1)
print(prediction2)
